
import type * as THREE from 'three';

export type LogoAnimationType = 'none' | 'solid' | 'blink' | 'pulse' | 'rainbowCycle';

export type LogoAnimationSettings = {
  type: LogoAnimationType;
  speed: number;
  color: string;
};

export type WebGLSceneAssets = {
  scene: THREE.Scene;
  camera: THREE.PerspectiveCamera | THREE.OrthographicCamera;
  renderer: THREE.WebGLRenderer;
  // Scene-specific assets, e.g., for particle systems, materials, video textures
  particles?: THREE.Points;
  particleMaterial?: THREE.PointsMaterial; // Or other material types
  particleGeometry?: THREE.BufferGeometry;
  positions?: Float32Array;
  colors?: Float32Array;
  velocities?: Float32Array;
  lifetimes?: Float32Array;
  PARTICLE_COUNT?: number;
  lastBeatTime?: number;
  lastAmbientSpawnTime?: number;
  lastFrameTime?: number;
  tempColor?: THREE.Color;
  bgColor?: THREE.Color;
  rotationSpeed?: THREE.Vector3;
  videoTexture?: THREE.VideoTexture;
  planeMesh?: THREE.Mesh;
  shaderMaterial?: THREE.ShaderMaterial;
  geometries?: THREE.BufferGeometry[]; // For Echoing Shapes
  activeShapes?: any[]; // For Echoing Shapes, more specific type if possible
  spawnInterval?: number; // For Echoing Shapes
  shapeBaseLifetime?: number; // For Echoing Shapes
  segments?: THREE.Mesh[]; // For Geometric Tunnel
  numSegments?: number; // For Geometric Tunnel
  segmentDepth?: number; // For Geometric Tunnel
  segmentSpeed?: number; // For Geometric Tunnel
  cameraBaseFov?: number; // For Geometric Tunnel
  ringGeometry?: THREE.BufferGeometry; // For Frequency Rings
  activeRings?: any[]; // For Frequency Rings
  lastSpawnTimes?: number[]; // For Frequency Rings
  instancedMesh?: THREE.InstancedMesh; // For Neon Pulse Grid
  GRID_SIZE?: number; // For Neon Pulse Grid
  cellWidth?: number; // For Neon Pulse Grid
  cellHeight?: number; // For Neon Pulse Grid
  cellStates?: any[]; // For Neon Pulse Grid
  // Allow any other scene-specific assets
  [key: string]: any; 
};


export type SceneDefinition = {
  id: string;
  name: string;
  meta?: Record<string, any>;
  rendererType?: '2d' | 'webgl';
  draw?: (
    canvasContext: CanvasRenderingContext2D,
    audioData: AudioData,
    settings: Settings,
    webcamFeed?: HTMLVideoElement
  ) => void;
  initWebGL?: (
    canvas: HTMLCanvasElement,
    settings: Settings,
    webcamElement?: HTMLVideoElement | null // Make webcamElement explicitly optional here
  ) => WebGLSceneAssets;
  drawWebGL?: (params: {
    renderer: THREE.WebGLRenderer; 
    scene: THREE.Scene; 
    camera: THREE.PerspectiveCamera | THREE.OrthographicCamera; 
    audioData: AudioData;
    settings: Settings;
    webGLAssets: any; 
    canvasWidth: number;
    canvasHeight: number;
    webcamElement?: HTMLVideoElement | null;
  }) => void;
  cleanupWebGL?: (webGLAssets: WebGLSceneAssets) => void; 
  thumbnailUrl?: string;
  dataAiHint?: string;
};

export type AudioData = {
  spectrum: Uint8Array;
  bassEnergy: number;
  midEnergy: number;
  trebleEnergy: number;
  rms: number;
  bpm: number;
  beat: boolean;
};

export type Settings = {
  fftSize: 128 | 256 | 512;
  gain: number;
  enableAgc: boolean;
  gamma: number;
  dither: number;
  brightCap: number;
  logoOpacity: number;
  showWebcam: boolean;
  mirrorWebcam: boolean;
  currentSceneId: string;
  panicMode: boolean;
  logoBlackout: boolean;
  logoAnimationSettings: LogoAnimationSettings;
  lastAISuggestedAssetPrompt?: string;
  sceneTransitionDuration: number;
  sceneTransitionActive: boolean;
  monitorAudio: boolean;
  selectedAudioInputDeviceId?: string;
  enableAiOverlay: boolean;
  aiGeneratedOverlayUri: string | null;
  aiOverlayOpacity: number;
  aiOverlayBlendMode: GlobalCompositeOperation;
  aiOverlayPrompt: string;
  enablePeriodicAiOverlay: boolean;
  aiOverlayRegenerationInterval: number;
};

export type PaletteGenieColor = {
  hue: number;
  saturation: number;
  brightness: number;
};

export type ProceduralAsset = {
  textureDataUri?: string;
  meshDataUri?: string;
};

export type Cue = {
  time: number;
  action: 'change_scene' | 'set_setting';
  payload: {
    sceneId?: string;
    settingKey?: keyof Settings;
    settingValue?: any;
  };
};

export type RehearsalLogEntry = {
  id?: number; // Optional: auto-generated by IndexedDB
  timestamp: number;
  event: string; // e.g., 'scene_change', 'setting_update', 'ai_overlay_generated'
  details: Record<string, any>; // e.g., { sceneId: '...', reason: '...' }
};


// Valid values for CanvasRenderingContext2D.globalCompositeOperation
// Source: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
export const VALID_BLEND_MODES: GlobalCompositeOperation[] = [
  'source-over', 'source-in', 'source-out', 'source-atop',
  'destination-over', 'destination-in', 'destination-out', 'destination-atop',
  'lighter', 'copy', 'xor', 'multiply', 'screen', 'overlay', 'darken',
  'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light',
  'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'
];
